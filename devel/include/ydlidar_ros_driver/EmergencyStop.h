// Generated by gencpp from file ydlidar_ros_driver/EmergencyStop.msg
// DO NOT EDIT!


#ifndef YDLIDAR_ROS_DRIVER_MESSAGE_EMERGENCYSTOP_H
#define YDLIDAR_ROS_DRIVER_MESSAGE_EMERGENCYSTOP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ydlidar_ros_driver
{
template <class ContainerAllocator>
struct EmergencyStop_
{
  typedef EmergencyStop_<ContainerAllocator> Type;

  EmergencyStop_()
    : signal()  {
    }
  EmergencyStop_(const ContainerAllocator& _alloc)
    : signal(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _signal_type;
  _signal_type signal;





  typedef boost::shared_ptr< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> const> ConstPtr;

}; // struct EmergencyStop_

typedef ::ydlidar_ros_driver::EmergencyStop_<std::allocator<void> > EmergencyStop;

typedef boost::shared_ptr< ::ydlidar_ros_driver::EmergencyStop > EmergencyStopPtr;
typedef boost::shared_ptr< ::ydlidar_ros_driver::EmergencyStop const> EmergencyStopConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator1> & lhs, const ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator2> & rhs)
{
  return lhs.signal == rhs.signal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator1> & lhs, const ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ydlidar_ros_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9591b8ace81feee36c93130ad3fe6a19";
  }

  static const char* value(const ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9591b8ace81feee3ULL;
  static const uint64_t static_value2 = 0x6c93130ad3fe6a19ULL;
};

template<class ContainerAllocator>
struct DataType< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ydlidar_ros_driver/EmergencyStop";
  }

  static const char* value(const ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string signal\n"
;
  }

  static const char* value(const ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EmergencyStop_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ydlidar_ros_driver::EmergencyStop_<ContainerAllocator>& v)
  {
    s << indent << "signal: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.signal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YDLIDAR_ROS_DRIVER_MESSAGE_EMERGENCYSTOP_H
